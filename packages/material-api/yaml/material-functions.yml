# yaml/material-functions.yml

getUploadUrl:
  handler: functions/getUploadUrl.handler
  name: hrk-get-upload-url-${sls:stage}
  description: Generates a presigned URL to upload a file to S3.
  events:
    - httpApi:
        method: POST
        path: /materials/upload-url
        authorizer:
          name: centralJwtAuthorizer
  environment:
    MEDIA_BUCKET_NAME: ${self:custom.mediaBucketName}
    COGNITO_USER_POOL_ID: ${self:custom.userPoolId}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource:
        - "arn:aws:s3:::${self:custom.mediaBucketName}/*"
    - Effect: "Allow"
      Action:
        - "cognito-idp:AdminGetUser"
      Resource:
        - "arn:aws:cognito-idp:${self:provider.region}:${aws:accountId}:userpool/${self:custom.userPoolId}"

createMaterial:
  handler: functions/createMaterial.handler
  name: hrk-create-material-${sls:stage}
  description: Creates a material record and links it to a repertoire item.
  events:
    - httpApi:
        method: POST
        path: /groups/{groupName}/repertoires/{repertoireId}/materials
        authorizer:
          name: centralJwtAuthorizer
  environment:
    MAIN_TABLE: ${self:custom.mainTableName}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.mainTableName}"

createGlobalMaterial:
    # Peka på den nya handler-filen vi diskuterade
  handler: functions/createGlobalMaterial.handler 
  name: hrk-create-global-material-${sls:stage}
  description: Creates a new global material item. (Admin only)
  events:
    - httpApi:
        method: POST
        path: /materials 
        authorizer:
          name: centralJwtAuthorizer
  environment:
    MAIN_TABLE: ${self:custom.mainTableName}
    COGNITO_USER_POOL_ID: ${self:custom.userPoolId} # Lägg till denna
  iamRoleStatements:
    - Effect: "Allow"
      Action: ["dynamodb:PutItem"]
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.mainTableName}"
        - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.mainTableName}/index/GSI1"
    - Effect: "Allow" # Lägg till detta block för Cognito
      Action: ["cognito-idp:AdminGetUser"]
      Resource: ["arn:aws:cognito-idp:${self:provider.region}:${aws:accountId}:userpool/${self:custom.userPoolId}"]

listMaterials:
  handler: functions/list.handler # Båda endpoints använder samma handler
  name: hrk-list-materials-${sls:stage}
  description: Fetches materials for a group, either from URL param or auth context.
  events:
    - httpApi:
        method: GET
        path: /groups/{groupName}/materials
    - httpApi:
        method: GET
        path: /my-materials
        authorizer:
          name: centralJwtAuthorizer
  environment:
    MAIN_TABLE: ${self:custom.mainTableName}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:Query"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.mainTableName}"

listAllGlobalMaterials:
  handler: functions/listAllGlobalMaterials.handler
  name: hrk-list-all-global-materials-${sls:stage}
  description: Fetches all global material items for the media library.
  events:
    - httpApi:
        method: GET
        path: /materials 
        authorizer:
          name: centralJwtAuthorizer # Alla inloggade (admins/körledare) ska kunna se listan
  environment:
    MAIN_TABLE: ${self:custom.mainTableName}
  iamRoleStatements:
    - Effect: "Allow"
      Action: ["dynamodb:Query"]
      Resource:
        # Viktigt att ge behörighet att göra en Query på GSI1-indexet
        - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.mainTableName}/index/GSI1"


deleteMaterial:
  handler: functions/delete.handler
  name: hrk-delete-material-${sls:stage}
  description: Deletes a specific material item for a group.
  events:
    - httpApi:
        method: DELETE
        path: /groups/{groupName}/repertoires/{repertoireId}/materials/{materialId}
        authorizer:
          name: centralJwtAuthorizer
  environment:
    MAIN_TABLE: ${self:custom.mainTableName}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:DeleteItem"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.mainTableName}"

deleteGlobalMaterial:
    handler: functions/deleteGlobalMaterial.handler
    name: hrk-delete-global-material-${sls:stage}
    description: Deletes a global material item from DynamoDB and S3. (Admin only)
    events:
      - httpApi:
          method: DELETE # <-- Rätt metod för att radera
          path: /materials/{materialId} # <-- RESTful sökväg
          authorizer:
            name: centralJwtAuthorizer
    environment:
      MAIN_TABLE: ${self:custom.mainTableName}
      MEDIA_BUCKET_NAME: ${self:custom.mediaBucketName} # Behöver bucket-namnet
      COGNITO_USER_POOL_ID: ${self:custom.userPoolId}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"      # För att läsa posten och få fileKey
          - "dynamodb:DeleteItem"   # För att radera posten
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.mainTableName}"
      - Effect: "Allow"
        Action:
          - "s3:DeleteObject"     # För att radera filen från S3
        Resource:
          - "arn:aws:s3:::${self:custom.mediaBucketName}/*"
      - Effect: "Allow" # <-- LÄGG TILL DETTA BLOCK
        Action: ["cognito-idp:AdminGetUser"]
        Resource: ["arn:aws:cognito-idp:${self:provider.region}:${aws:accountId}:userpool/${self:custom.userPoolId}"]

batchDeleteGlobalMaterials:
    handler: functions/batchDeleteGlobalMaterials.handler
    name: hrk-batch-delete-global-materials-${sls:stage}
    description: Deletes multiple global materials from DynamoDB and S3. (Admin only)
    events:
      - httpApi:
          method: POST # Använder POST för att kunna skicka med en body
          path: /materials/batch-delete
          authorizer:
            name: centralJwtAuthorizer
    environment:
      MAIN_TABLE: ${self:custom.mainTableName}
      MEDIA_BUCKET_NAME: ${self:custom.mediaBucketName}
      COGNITO_USER_POOL_ID: ${self:custom.userPoolId}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:BatchGetItem"     # Ny behörighet
          - "dynamodb:BatchWriteItem"   # Ny behörighet
        Resource: ["arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.mainTableName}"]
      - Effect: "Allow"
        Action:
          - "s3:DeleteObjects"        # Ny, effektivare behörighet
        Resource: ["arn:aws:s3:::${self:custom.mediaBucketName}/*"]
      - Effect: "Allow"
        Action: ["cognito-idp:AdminGetUser"]
        Resource: ["arn:aws:cognito-idp:${self:provider.region}:${aws:accountId}:userpool/${self:custom.userPoolId}"]

createRepertoire:
  handler: functions/createRepertoire.handler
  name: hrk-create-repertoire-${sls:stage}
  description: Creates a new repertoire item (a song) for a group.
  events:
    - httpApi:
        method: POST
        path: /groups/{groupName}/repertoires
        authorizer:
          name: centralJwtAuthorizer
  environment:
    MAIN_TABLE: ${self:custom.mainTableName}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.mainTableName}"


listRepertoires:
  handler: functions/listRepertoires.handler
  name: hrk-list-repertoires-${sls:stage}
  description: Fetches all repertoire items (songs) for a group.
  events:
    - httpApi:
        method: GET
        path: /groups/{groupName}/repertoires
        authorizer:
          name: centralJwtAuthorizer
  environment:
    MAIN_TABLE: ${self:custom.mainTableName}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:Query"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.mainTableName}"

listMaterialsInRepertoire:
  handler: functions/listMaterialsInRepertoire.handler
  name: hrk-list-materials-in-repertoire-${sls:stage}
  description: Fetches all material files linked to a specific repertoire item.
  events:
    - httpApi:
        method: GET
        path: /groups/{groupName}/repertoires/{repertoireId}/materials
        authorizer:
          name: centralJwtAuthorizer
  environment:
    MAIN_TABLE: ${self:custom.mainTableName}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:Query"        # För att hitta kopplingsobjekten
        - "dynamodb:BatchGetItem" # FÖR ATT HÄMTA DETALJERNA FÖR MATERIALET
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.mainTableName}"

deleteRepertoire:
  handler: functions/deleteRepertoire.handler
  name: hrk-delete-repertoire-${sls:stage}
  description: Deletes a repertoire item and all its associated materials.
  events:
    - httpApi:
        method: DELETE
        path: /groups/{groupName}/repertoires/{repertoireId}
        authorizer:
          name: centralJwtAuthorizer
  environment:
    MAIN_TABLE: ${self:custom.mainTableName}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:Query" # För att hitta alla objekt
        - "dynamodb:BatchWriteItem" # För att radera dem
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.mainTableName}"

linkMaterialToRepertoire:
  handler: functions/linkMaterialToRepertoire.handler
  name: hrk-link-material-to-repertoire-${sls:stage}
  description: Links one or more global materials to a specific repertoire.
  events:
    - httpApi:
        method: POST
        path: /groups/{groupName}/repertoires/{repertoireId}/link-materials
        authorizer:
          name: centralJwtAuthorizer
  environment:
    MAIN_TABLE: ${self:custom.mainTableName}
    COGNITO_USER_POOL_ID: ${self:custom.userPoolId}
  iamRoleStatements:
    - Effect: "Allow"
      # BatchWriteItem är en effektivare version av PutItem för flera objekt
      Action: ["dynamodb:BatchWriteItem"] 
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.mainTableName}"
    - Effect: "Allow"
      Action: ["cognito-idp:AdminGetUser"]
      Resource: ["arn:aws:cognito-idp:${self:provider.region}:${aws:accountId}:userpool/${self:custom.userPoolId}"]